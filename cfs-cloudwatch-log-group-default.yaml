AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  StackSet template that provisions a Lambda function to set CloudWatch Log Group
  retention policies across all organization accounts.
Parameters:
  DefaultLogRetention:
    Type: "Number"
    Description: "Default retention period for CloudWatch log groups in days"
    Default: 365
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]
  LambdaLogLevel:
    Type: "String"
    Description: "Log level for the Lambda function"
    Default: "INFO"
    AllowedValues: ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudWatchLogsManagement"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:DescribeLogGroups"
                  - "logs:PutRetentionPolicy"
                Resource: "*"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CloudWatchLogsRetentionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          default_log_retention: !Ref DefaultLogRetention
          logger_level: !Ref LambdaLogLevel
      Code:
        ZipFile: |
          import logging
          import os
          import boto3

          # Configure logging
          logger = logging.getLogger()
          logging.basicConfig(format="%(asctime)s %(message)s")
          logger.setLevel(logging.getLevelName(os.getenv("logger_level", "DEBUG")))

          log_client = boto3.client("logs", region_name=os.getenv("AWS_REGION"))
          default_log_retention = int(os.getenv("default_log_retention", 365))


          def get_log_group_name() -> list[str]:
              log_groups = []
              log_paginator = log_client.get_paginator("describe_log_groups")
              for page in log_paginator.paginate():
                  for log_group in page["logGroups"]:
                      retention_in_days = log_group.get("retentionInDays", None)
                      if retention_in_days is None or retention_in_days > default_log_retention:
                          log_groups.append(log_group["logGroupName"])
              return log_groups


          def lambda_handler(event, context) -> None:
              """
              Lambda function handler for setting default retention policy for CloudWatch log groups.
              """
              logger.info(f"Recieved event: {event}")
              event_source = event.get("eventSource", None)
              if event_source != "logs.amazonaws.com":
                  for log_group_name in get_log_group_name():
                      logger.info(f"Setting default retention policy for log group: {log_group_name}")
                      log_client.put_retention_policy(logGroupName=log_group_name, retentionInDays=default_log_retention)
                  return

              log_group_name = event["requestParameters"].get("logGroupName", None)
              retention_in_days = event["requestParameters"].get("retentionInDays", None)

              if (retention_in_days is None) or (retention_in_days > default_log_retention):
                  logger.info(f"Setting default retention policy for log group: {log_group_name}")
                  log_client.put_retention_policy(logGroupName=log_group_name, retentionInDays=default_log_retention)

              return

      Runtime: "python3.12"
      Timeout: 60
      MemorySize: 128

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt CloudWatchLogsRetentionLambda.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LogGroupCreationRule.Arn

  LogGroupCreationRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Trigger Lambda on CloudWatch Log Group creation"
      EventPattern:
        source:
          - "aws.logs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "logs.amazonaws.com"
          eventName:
            - "CreateLogGroup"
            - "PutRetentionPolicy"
            - "DeleteRetentionPolicy"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CloudWatchLogsRetentionLambda.Arn
          Id: "CloudWatchLogsRetentionLambda"
          InputPath: "$.detail"

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt CloudWatchLogsRetentionLambda.Arn
